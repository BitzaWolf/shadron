#include "WolfModel.shadron"
#include <affine_transform>
#define PI 3.14

// Near/far values for projection (minimum and maximum draw distance)
const float NEAR = 1.0/256.0, FAR = 256.0;
parameter float ratioOfInfraction = 0.76 : range(0.1, 3);
//parameter float cameraRotationY = 0 : range(0, 1);
//parameter float cameraRotationX = 0.5 : range(0, 1);

const vec3 cameraPos = vec3(0.0, -7.0, -30);

cubemap _CubeMap = file("Sky.jpg");

glsl struct _FragData
{
	vec3 norm;
	vec3 viewDirection;
};


glsl vec4 _Vertex(out _FragData fragmentData, int vertexIndex)
{
	vec3 vertex = WOLF_MODEL_Coord(vertexIndex);
	//vertex = rotateX(vertex, PI - cameraRotationX * PI);
	//vertex = rotateY(vertex, cameraRotationY * 2 * PI);
    vertex = translate(vertex, cameraPos);
	fragmentData.norm = WOLF_MODEL_Normal(vertexIndex);
	fragmentData.viewDirection = cameraPos - vertex;

    float fov = 0.5 * PI - atan(0.0625 * shadron_Mouse.z);
    return projectPerspectiveHFOV(vertex, fov, NEAR, FAR);
}

glsl vec4 _Fragment(in _FragData fragmentData)
{
	vec3 refracted = refract(normalize(fragmentData.viewDirection), normalize(fragmentData.norm), ratioOfInfraction);
    vec4 color = texture(_CubeMap, fragmentData.norm);
	color.a = 0.5;
	return color;
}

model image _Wolf :
	fragment_data(_FragData),
	vertex(_Vertex, WOLF_MODEL_PRIMITIVES, WOLF_MODEL_VERTEX_COUNT),
	fragment(_Fragment),
	multisample(4),
	dimensions(1024, 1024);

glsl vec4 _imageFragment(vec2 fragCoord)
{
	vec4 wolf = texture(_Wolf, fragCoord);

	vec3 cam = rotateY(vec3(0, 0, -1), shadron_Mouse.x / 100);
	vec3 localRight = normalize(cross(cam, vec3(0, 1, 0)));

	fragCoord -= 0.5;
	vec3 cubeSampler =
		cam +
		fragCoord.x * localRight +
		fragCoord.y * vec3(0, 1, 0);
	vec4 sky = texture(_CubeMap, cubeSampler);

	return mix(sky, wolf, wolf.a);
}

image _Output = glsl(_imageFragment, sizeof(_Wolf));
	