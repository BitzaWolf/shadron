#include "WolfModel.shadron"
#include "ViewDirection.shadron"
#include <affine_transform>

// Near/far values for projection (minimum and maximum draw distance)
const float NEAR = 1.0/256.0, FAR = 256.0;
parameter float ratioOfInfraction = 0.76 : range(0.1, 3);
parameter float wolfXRotation = 0 : range(-3.14, 3.14);
parameter float wolfYRotation = 0 : range(-3.14, 3.14);
parameter float wolfXPosition = 0 : range(-10, 10);
parameter float wolfYPosition = 0 : range(-10, 10);
parameter float wolfZPosition = 0 : range(-10, 10);

// Image from http://www.humus.name/index.php?page=Textures&ID=78
cubemap _Cubemap = file("Mountain.png");

glsl struct _FragData
{
	vec3 norm;
};


glsl vec4 _ModelVertex(out _FragData fragmentData, int vertexIndex)
{
	vec3 normal = WOLF_MODEL_Normal(vertexIndex);
	normal = rotateX(normal, PI - wolfXRotation);
	normal = rotateY(normal, wolfYRotation);
	fragmentData.norm = normal;

	vec3 vertex = WOLF_MODEL_Coord(vertexIndex);
	vertex = rotateX(vertex, PI - wolfXRotation);
	vertex = rotateY(vertex, wolfYRotation);
    vertex = translate(vertex, vec3(wolfXPosition, wolfYPosition, wolfZPosition));

    float fov = 0.5 * PI - atan(0.0625 * shadron_Mouse.z);
    return projectPerspectiveHFOV(vertex, fov, NEAR, FAR);
}

glsl vec4 _ModelFragment(in _FragData fragmentData)
{
    vec4 color = vec4(fragmentData.norm, 1);
	return color;
}

model image _Wolf :
	fragment_data(_FragData),
	vertex(_ModelVertex, WOLF_MODEL_PRIMITIVES, WOLF_MODEL_VERTEX_COUNT),
	fragment(_ModelFragment),
	multisample(4),
	dimensions(512, 512);

glsl vec4 _ImageFragment(vec2 fragPos)
{
	vec4 wolfNorm = texture(_Wolf, fragPos);
	vec3 viewDirection = GetViewDirection(fragPos);
	if (wolfNorm.w != 0)
	{
        viewDirection = refract(viewDirection, wolfNorm.xyz, ratioOfInfraction);
    }
    
    return texture(_Cubemap, viewDirection);
}

image _Output = glsl(_ImageFragment, sizeof(_Wolf));
export tiff(_Output, "Refraction Example.tif");